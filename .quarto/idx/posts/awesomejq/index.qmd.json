{"title":"Awesome jq and GeoJSON","markdown":{"yaml":{"title":"Awesome jq and GeoJSON","author":"Olivier Leroy","date":"2024-03-10","categories":["code","spatial data"]},"headingText":"Awesome jq and GeoJSON!","containsRefs":false,"markdown":"\n\n\nIf like us your are maniplating a lot of [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) and want a quick CLI tools to deal (filter and slice) them you should definitely give `jq` a try!\n\nYou can find plenty of great guides online but the [documentation](https://jqlang.github.io/jq/manual/) and the [playground](https://jqplay.org/) are always a good start.\n\nA quick disclaimer: we are using an UNIX shell to run it (zsh) if you are using powershell you will need to adapt the following commands.  \n\nSadly few tutorials exist on it for `GeoJSON` and we hope that the few tricks we are going to show you will help you on your leaning journey. \n\nWe are using a GeoJSON with Vermont Census Blocks and attributes related to our works with broadband data. \n\nIt is not a deaply nested JSON but it is perfect to illustrate some very commun use cases.\nA quick check let us know that it is 94 MB. Not \"that\" big but still decent.\n\nFirst let see how many features does it has. \n\nWe can approximate that: \n\n```bash\nwc -l data/vt-bb.geojson\n# 24618 data/vt-bb.geojson\n```\n\nThis is close but here we are counting some rows at the top and bottom of the file that are not features (try `head -n 5` and `tail` on it if you are curious).\n\nWell we can also use `jq` :\n\n```bash\njq '.features | length' data/vt-bb.geojson\n# 24611\n```\n\nThis is the correct number of blocks! How did that magic works? Let's decompose it:\n\n- `jq` here we are calling jq like any other CLI tools \n\n- `data/vt-bb.goejson` is the path of our file as last argument\n\n- `'.features | length'` this is a **jq filter**, remember we are in the shell and here whitespace have a meaning, not quoting it would mean that we have 4 arguments when you just have 2.\n\n    - `.features` will return the json array containing every faetures \n  \n    - `|` will pipe the stream of features into a new filter\n\n    - `length` is a builtin function that behave differently depending the object input, here with an array it will return the number of elements \n  \n\nIt is always a good idea to start experimenting with smaller data so let's do it:\n\n```bash\njq '.features[0:5]'  data/vt-bb.geojson > not_perfect_sample.geojson\n```\n\nHere we asked for the [0 to 5[ (yes: `[inclusive:exclusive]`) features (ie the first 5) and it produces a valid JSON but if you inspect it you will see that we moved from the GeoJON to a JSON array. \n\n```bash\njq '.' not_perfect_sample.geojson | head -n 4\n# [\n#   {\n#     \"type\": \"Feature\",\n#     \"properties\": {\n# to compare with :\njq '.' data/vt-bb.geojson | head -n 12/\n# {\n#   \"type\": \"FeatureCollection\",\n#   \"name\": \"sql_statement\",\n#   \"crs\": {\n#     \"type\": \"name\",\n#     \"properties\": {\n#       \"name\": \"urn:ogc:def:crs:EPSG::4269\"\n#     }\n#   },\n#   \"features\": [\n#     {\n#       \"type\": \"Feature\",\n```\nWe used `.features` hence it returned the following value (here an array with all the features) but we loosed `type`, `name`, and `crs`.\n\nYou probably have noticed that `.` is using to return all the input as output but by default `jq` will *prettify* the JSON. \n\nIf we want to keep them we will need to be slighly more verbose:\n\n```bash\njq '{type: .type , crs: .crs ,features: .features[0:10]}' data/vt-bb.geojson > better_sample.geojson \n```\nHere we introduced `{}` allowing you to build a JSON object. We then stick them together and send them to a new JSON with a proper type and crs (grabed from our original file). \n\nWe could just want the geometries of our census blocks:\n\n```bash\njq '{type: .type , crs: .crs ,features: [.features[] | del(.properties)]}' better_sample.geojson > sample_only_geom.geojson  \n```\n\nHere we are streaming a filter on `.features[]` into a function that will delete all properties (`del(.properties)`) and this will be used as an array for features. \n\nWe will need to adjust it a bit for of `data/vt-bb.geojson`: \n\n```bash\njq --compact-output  '{type: .type , crs: .crs ,features: [.features[] | del(.properties)]}'  data/vt-bb.geojson > data/geom.geojson\n```\n\n`--compact-output` will convert to a single line JSON (and saved space!). \nNow `data/geom.geojson` is  72MB. \n\n But wait what if we just want the properties? \n\nFirst let's get their keys:\n\ngetting all the key \nflattening\nconverting to csv\n","srcMarkdownNoYaml":"\n\n# Awesome jq and GeoJSON!\n\nIf like us your are maniplating a lot of [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) and want a quick CLI tools to deal (filter and slice) them you should definitely give `jq` a try!\n\nYou can find plenty of great guides online but the [documentation](https://jqlang.github.io/jq/manual/) and the [playground](https://jqplay.org/) are always a good start.\n\nA quick disclaimer: we are using an UNIX shell to run it (zsh) if you are using powershell you will need to adapt the following commands.  \n\nSadly few tutorials exist on it for `GeoJSON` and we hope that the few tricks we are going to show you will help you on your leaning journey. \n\nWe are using a GeoJSON with Vermont Census Blocks and attributes related to our works with broadband data. \n\nIt is not a deaply nested JSON but it is perfect to illustrate some very commun use cases.\nA quick check let us know that it is 94 MB. Not \"that\" big but still decent.\n\nFirst let see how many features does it has. \n\nWe can approximate that: \n\n```bash\nwc -l data/vt-bb.geojson\n# 24618 data/vt-bb.geojson\n```\n\nThis is close but here we are counting some rows at the top and bottom of the file that are not features (try `head -n 5` and `tail` on it if you are curious).\n\nWell we can also use `jq` :\n\n```bash\njq '.features | length' data/vt-bb.geojson\n# 24611\n```\n\nThis is the correct number of blocks! How did that magic works? Let's decompose it:\n\n- `jq` here we are calling jq like any other CLI tools \n\n- `data/vt-bb.goejson` is the path of our file as last argument\n\n- `'.features | length'` this is a **jq filter**, remember we are in the shell and here whitespace have a meaning, not quoting it would mean that we have 4 arguments when you just have 2.\n\n    - `.features` will return the json array containing every faetures \n  \n    - `|` will pipe the stream of features into a new filter\n\n    - `length` is a builtin function that behave differently depending the object input, here with an array it will return the number of elements \n  \n\nIt is always a good idea to start experimenting with smaller data so let's do it:\n\n```bash\njq '.features[0:5]'  data/vt-bb.geojson > not_perfect_sample.geojson\n```\n\nHere we asked for the [0 to 5[ (yes: `[inclusive:exclusive]`) features (ie the first 5) and it produces a valid JSON but if you inspect it you will see that we moved from the GeoJON to a JSON array. \n\n```bash\njq '.' not_perfect_sample.geojson | head -n 4\n# [\n#   {\n#     \"type\": \"Feature\",\n#     \"properties\": {\n# to compare with :\njq '.' data/vt-bb.geojson | head -n 12/\n# {\n#   \"type\": \"FeatureCollection\",\n#   \"name\": \"sql_statement\",\n#   \"crs\": {\n#     \"type\": \"name\",\n#     \"properties\": {\n#       \"name\": \"urn:ogc:def:crs:EPSG::4269\"\n#     }\n#   },\n#   \"features\": [\n#     {\n#       \"type\": \"Feature\",\n```\nWe used `.features` hence it returned the following value (here an array with all the features) but we loosed `type`, `name`, and `crs`.\n\nYou probably have noticed that `.` is using to return all the input as output but by default `jq` will *prettify* the JSON. \n\nIf we want to keep them we will need to be slighly more verbose:\n\n```bash\njq '{type: .type , crs: .crs ,features: .features[0:10]}' data/vt-bb.geojson > better_sample.geojson \n```\nHere we introduced `{}` allowing you to build a JSON object. We then stick them together and send them to a new JSON with a proper type and crs (grabed from our original file). \n\nWe could just want the geometries of our census blocks:\n\n```bash\njq '{type: .type , crs: .crs ,features: [.features[] | del(.properties)]}' better_sample.geojson > sample_only_geom.geojson  \n```\n\nHere we are streaming a filter on `.features[]` into a function that will delete all properties (`del(.properties)`) and this will be used as an array for features. \n\nWe will need to adjust it a bit for of `data/vt-bb.geojson`: \n\n```bash\njq --compact-output  '{type: .type , crs: .crs ,features: [.features[] | del(.properties)]}'  data/vt-bb.geojson > data/geom.geojson\n```\n\n`--compact-output` will convert to a single line JSON (and saved space!). \nNow `data/geom.geojson` is  72MB. \n\n But wait what if we just want the properties? \n\nFirst let's get their keys:\n\ngetting all the key \nflattening\nconverting to csv\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","resources":["assets/*"],"theme":["litera","../../styles.scss"],"mainfont":"Bitter","fontcolor":"#121E22","linkcolor":"#00835D","title-block-banner":true,"title":"Awesome jq and GeoJSON","author":"Olivier Leroy","date":"2024-03-10","categories":["code","spatial data"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}